<?php

namespace App\Providers;

use Illuminate\Support\Facades\Gate;
use Laravel\Telescope\IncomingEntry;
use Laravel\Telescope\Telescope;
use Laravel\Telescope\TelescopeApplicationServiceProvider;
use Laravel\Telescope\Watchers\AppInstanceTagWatcher;

class TelescopeServiceProvider extends TelescopeApplicationServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        // Telescope::night();

        Telescope::tag(function (IncomingEntry $entry) {
            $tags = [];
            
            // Static tag from config/env
            $staticTag = config('telescope.custom_static_tag', env('TELESCOPE_CUSTOM_STATIC_TAG'));
            if ($staticTag) {
                $tags[] = $staticTag;
                //info("Added static tag", [$staticTag]);
            }

            // Dynamic tag from service container
            $dynamicTagKey = config('telescope.custom_dynamic_tag_key', env('TELESCOPE_DYNAMIC_TAG_KEY', 'site_token'));
            if ($dynamicTagKey && app()->bound($dynamicTagKey)) {
                $dynamicValue = app($dynamicTagKey);
                $tags[] = $dynamicValue;
                //info("Added dynamic tag", [$dynamicValue]);
            }

            // Add the current URL path as a tag
            if (request()->path()) {
                $pathTag = 'path:' . request()->path();
                $tags[] = $pathTag;
                //info("Added path tag", [$pathTag]);
            }
            
            // Add entry type tag for easier filtering
            $tags[] = 'type:' . $entry->type;
            
            // Add authenticated user tag if available
            if (auth()->check()) {
                $tags[] = 'user:' . auth()->id();
            }
            
            // info("Final tags for entry", [
            //     'entry_type' => $entry->type,
            //     'entry_uuid' => $entry->uuid,
            //     'tags' => $tags
            // ]);
            
            return $tags;
        });

        // Add filter to ensure entries with tags are recorded
        Telescope::filter(function (IncomingEntry $entry) {
            
            // In production, record entries with monitored tags or important events
            return $entry->isReportableException() 
                || $entry->isFailedJob() 
                || $entry->isScheduledTask() 
                || $entry->isSlowQuery() 
                || $entry->hasMonitoredTag()
                || !empty($entry->tags); // Record any entry that has tags
        });

        $this->hideSensitiveRequestDetails();
    }

    /**
     * Prevent sensitive request details from being logged by Telescope.
     */
    protected function hideSensitiveRequestDetails(): void
    {
        Telescope::hideRequestParameters(['_token']);

        Telescope::hideRequestHeaders([
            'cookie',
            'x-csrf-token',
            'x-xsrf-token',
        ]);
    }

    /**
     * Register the Telescope gate.
     *
     * This gate determines who can access Telescope in non-local environments.
     */
    protected function gate(): void
    {
        Gate::define('viewTelescope', function ($user = null) {
            // Allow access in production if TELESCOPE_ENABLED_IN_PROD is true
            return app()->environment('local') || config('telescope.enabled_in_prod', env('TELESCOPE_ENABLED_IN_PROD', false));
        });
    }
}
